!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	libft/Makefile	/^AR=ar$/;"	m
ARFLAGS	libft/Makefile	/^ARFLAGS=rc$/;"	m
AST_STRUCT_H	AST_struct.h	/^# define AST_STRUCT_H$/;"	d
BONUS_OBJS	libft/Makefile	/^BONUS_OBJS=$(BONUS_SRCS:.c=.o)$/;"	m
BONUS_SRCS	libft/Makefile	/^BONUS_SRCS=ft_lstnew_bonus.c ft_lstadd_front_bonus.c ft_lstsize_bonus.c ft_lstlast_bonus.c ft_lstadd_back_bonus.c ft_lstdelone_bonus.c ft_lstclear_bonus.c ft_lstiter_bonus.c ft_lstmap_bonus.c$/;"	m
CC	libft/Makefile	/^CC=cc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS=-Wall -Wextra -Werror$/;"	m
DIR_HEADER	libft/Makefile	/^DIR_HEADER=.\/$/;"	m
DIR_SRCS	libft/Makefile	/^DIR_SRCS=.\/$/;"	m
FT_PRINTF_H	libft/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
HEADER	libft/Makefile	/^HEADER=libft.h$/;"	m
INDEX	libft/libft.h	/^# define INDEX	/;"	d
JNDEX	libft/libft.h	/^# define JNDEX	/;"	d
KNDEX	libft/libft.h	/^# define KNDEX	/;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
MAN_OBJS	libft/Makefile	/^MAN_OBJS=$(MAN_SRCS:.c=.o)$/;"	m
MAN_SRCS	libft/Makefile	/^MAN_SRCS=ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c ft_strlen.c ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c ft_strlcpy.c ft_strlcat.c ft_toupper.c ft_tolower.c ft_strchr.c ft_strrchr.c ft_strncmp.c ft_memchr.c ft_memcmp.c ft_strnstr.c ft_atoi.c ft_calloc.c ft_strdup.c ft_substr.c ft_strjoin.c ft_strtrim.c ft_split.c ft_itoa.c ft_strmapi.c ft_striteri.c$/;"	m
NAME	libft/Makefile	/^NAME=libft.a$/;"	m
OBJS	libft/Makefile	/^OBJS=$(BONUS_OBJS) $(MAN_OBJS) $(PRINTF_OBJS)$/;"	m
PARSE_STRUCT_H	parse_struct.h	/^# define PARSE_STRUCT_H$/;"	d
PRINTF_OBJS	libft/Makefile	/^PRINTF_OBJS=$(PRINTF_SRCS:.c=.o)$/;"	m
PRINTF_SRCS	libft/Makefile	/^PRINTF_SRCS=ft_putchar_fd.c ft_putstr_fd.c ft_putendl_fd.c ft_putnbr_fd.c ft_puthex_l_fd.c ft_putint_fd.c ft_puts.c ft_putunbr_fd.c ft_printf.c ft_putchar_fd.c ft_puthex_s_fd.c ft_putmem_fd.c ft_putstr_fd.c$/;"	m
RM	libft/Makefile	/^RM=rm -fr$/;"	m
T_AND	parse_struct.h	/^	T_AND,				\/\/ 논리 연산 AND "&&"$/;"	e	enum:e_type
T_CLOSE_BRACKET	parse_struct.h	/^	T_CLOSE_BRACKET		\/\/ 논리 연산 괄호 닫힘 ')'$/;"	e	enum:e_type
T_D_GREATER	parse_struct.h	/^	T_D_GREATER,		\/\/ 리다이렉션 append ">>"$/;"	e	enum:e_type
T_D_LESSER	parse_struct.h	/^	T_D_LESSER,			\/\/ 리다이렉션 Here_doc "<<"$/;"	e	enum:e_type
T_ERROR	parse_struct.h	/^	T_ERROR = -1,		\/\/ 기본값 (syntax check때의 초깃값)$/;"	e	enum:e_type
T_GREATER	parse_struct.h	/^	T_GREATER,			\/\/ 리다이렉션 '>'$/;"	e	enum:e_type
T_LESSER	parse_struct.h	/^	T_LESSER,			\/\/ 리다이렉션 '<'$/;"	e	enum:e_type
T_OPEN_BRACKET	parse_struct.h	/^	T_OPEN_BRACKET,		\/\/ 논리 연산 괄호 열림 '('$/;"	e	enum:e_type
T_OR	parse_struct.h	/^	T_OR,				\/\/ 논리 연산 OR "||"$/;"	e	enum:e_type
T_PIPE	parse_struct.h	/^	T_PIPE,				\/\/ Pipe문자 '|'$/;"	e	enum:e_type
T_SPACE	parse_struct.h	/^	T_SPACE,			\/\/ 공백문자(보통 space)$/;"	e	enum:e_type
T_WORD	parse_struct.h	/^	T_WORD,				\/\/ 문자$/;"	e	enum:e_type
add_token	token_utils.c	/^void	add_token(t_token **list, t_token *token)$/;"	f
cmd	AST_struct.h	/^	t_command			*cmd;$/;"	m	struct:s_script
cmd	AST_struct.h	/^	t_command	*cmd;$/;"	m	struct:s_pipeline
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
count_words	libft/ft_split.c	/^static size_t	count_words(char const *str, char c)$/;"	f	file:
e_exp	AST_struct.h	/^enum	e_exp$/;"	g
e_operator	AST_struct.h	/^enum	e_operator$/;"	g
e_type	parse_struct.h	/^enum	e_type$/;"	g
exp	AST_struct.h	/^	t_exp		*exp;$/;"	m	struct:s_word
fd_from	AST_struct.h	/^	int	fd_from;$/;"	m	struct:s_io
fd_to	AST_struct.h	/^	int	fd_to;$/;"	m	struct:s_io
file	AST_struct.h	/^	t_word	*file;$/;"	m	struct:s_redirect
free_token	token_utils.c	/^void	free_token(t_token *token)$/;"	f
free_tokens	token_utils.c	/^void	free_tokens(t_token **tokens)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_free_all	libft/ft_split.c	/^static char	**ft_free_all(char **strings)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_islower	libft/ft_isalpha.c	/^static int	ft_islower(int c)$/;"	f	file:
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isupper	libft/ft_isalpha.c	/^static int	ft_isupper(int c)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd, ssize_t *ret, int *p_ret)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_puthex_l_fd	libft/ft_puthex_l_fd.c	/^void	ft_puthex_l_fd(unsigned int num, int fd, ssize_t *ret, int *p_ret)$/;"	f
ft_puthex_s_fd	libft/ft_puthex_s_fd.c	/^void	ft_puthex_s_fd(unsigned int num, int fd, ssize_t *ret, int *p_ret)$/;"	f
ft_putint_fd	libft/ft_putint_fd.c	/^void	ft_putint_fd(int n, int fd, ssize_t *ret, int *p_ret)$/;"	f
ft_putmem_fd	libft/ft_putmem_fd.c	/^void	ft_putmem_fd(unsigned long long num, int fd, ssize_t *ret, int *p_ret)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_puts	libft/ft_puts.c	/^void	ft_puts(char form, va_list ap, t_variable *var)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd, ssize_t *ret, int *p_ret)$/;"	f
ft_putunbr_fd	libft/ft_putunbr_fd.c	/^void	ft_putunbr_fd(unsigned int n, int fd, ssize_t *ret, int *p_ret)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup2	libft/ft_split.c	/^static char	*ft_strdup2(char const *src, int start, int end)$/;"	f	file:
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_len	libft/ft_itoa.c	/^static void	get_len(int nb, int *len, int *sign)$/;"	f	file:
get_meta1	meta.c	/^int	get_meta1(char *line, char **string, t_type *type)$/;"	f
get_meta2	meta.c	/^int	get_meta2(char *line, char **string, t_type *type)$/;"	f
get_type	tokenizer.c	/^t_type	get_type(char *string, int i)$/;"	f
get_word	tokenizer.c	/^int	get_word(char *line, char **string, t_type *type)$/;"	f
greater	libft/ft_memmove.c	/^static void	greater(unsigned char *dst, unsigned char *src, size_t len)$/;"	f	file:
greater_address	libft/ft_memmove.c	/^static int	greater_address(void *dst, const void *src)$/;"	f	file:
i	libft/ft_printf.h	/^	int		i;$/;"	m	struct:s_variable
insert_num	libft/ft_itoa.c	/^static void	insert_num(int nb, char *num_string, int *i)$/;"	f	file:
io	AST_struct.h	/^	t_io	*io;$/;"	m	struct:s_redirect
is_meta1	meta.c	/^int	is_meta1(char c)$/;"	f
is_meta2	meta.c	/^int	is_meta2(char c)$/;"	f
is_set	libft/ft_strtrim.c	/^static int	is_set(char const *set, char c)$/;"	f	file:
is_space	libft/ft_atoi.c	/^static int	is_space(char c)$/;"	f	file:
is_space	tokenizer.c	/^int	is_space(char c)$/;"	f
kind	AST_struct.h	/^	e_exp	kind; \/\/ 어떤 확장인지.$/;"	m	struct:s_exp
last_token	token_utils.c	/^t_token	*last_token(t_token *list)$/;"	f
leaks	tokenizer.c	/^void	leaks(void)$/;"	f
left	AST_struct.h	/^	t_script	*left;$/;"	m	struct:s_logical_expression
loc	AST_struct.h	/^	int		loc[2]; \/\/ 어디부터 어디까지 확장해야 하는지.$/;"	m	struct:s_exp
log_exp	AST_struct.h	/^	t_logical_expression *log_exp;$/;"	m	struct:s_script
main	tokenizer.c	/^int	main(void)$/;"	f
name	AST_struct.h	/^	t_word		*name;$/;"	m	struct:s_command
new_token	token_utils.c	/^t_token	*new_token(char *string, t_type type)$/;"	f
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	parse_struct.h	/^	struct	s_token	*next;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
operator	AST_struct.h	/^	e_operator	operator;$/;"	m	struct:s_logical_expression
operator	AST_struct.h	/^	t_type	operator;$/;"	m	struct:s_redirect
p_ret	libft/ft_printf.h	/^	int		p_ret;$/;"	m	struct:s_variable
pipeline	AST_struct.h	/^	struct s_pipeline	*pipeline;$/;"	m	struct:s_pipeline	typeref:struct:s_pipeline::s_pipeline
pipeline	AST_struct.h	/^	t_pipeline			*pipeline;$/;"	m	struct:s_script
prefix	AST_struct.h	/^	t_fix		*prefix;$/;"	m	struct:s_command
prev	parse_struct.h	/^	struct	s_token	*prev;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
redirect	AST_struct.h	/^	t_redirect	*redirect;$/;"	m	struct:s_fix
remove_space	tokenizer.c	/^int	remove_space(char *line)$/;"	f
ret	libft/ft_printf.h	/^	ssize_t	ret;$/;"	m	struct:s_variable
right	AST_struct.h	/^	t_script	*right;$/;"	m	struct:s_logical_expression
s_command	AST_struct.h	/^typedef struct s_command$/;"	s
s_exp	AST_struct.h	/^typedef struct s_exp$/;"	s
s_exp	AST_struct.h	/^} s_exp;$/;"	t	typeref:struct:s_exp
s_fix	AST_struct.h	/^typedef struct s_fix$/;"	s
s_io	AST_struct.h	/^typedef struct s_io$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_logical_expression	AST_struct.h	/^typedef struct s_logical_expression$/;"	s
s_pipeline	AST_struct.h	/^typedef struct s_pipeline$/;"	s
s_redirect	AST_struct.h	/^typedef struct	s_redirect$/;"	s
s_script	AST_struct.h	/^typedef struct s_script$/;"	s
s_token	parse_struct.h	/^struct s_token$/;"	s
s_variable	libft/ft_printf.h	/^typedef struct s_variable {$/;"	s
s_word	AST_struct.h	/^typedef struct s_word$/;"	s
set_type_meta1	meta.c	/^void	set_type_meta1(char c, int i, t_type *type)$/;"	f
smaller	libft/ft_memmove.c	/^static void	smaller(unsigned char *dst, unsigned char *src, size_t len)$/;"	f	file:
string	parse_struct.h	/^	char			*string;$/;"	m	struct:s_token
suffix	AST_struct.h	/^	t_fix		*suffix;$/;"	m	struct:s_command
t_command	AST_struct.h	/^} t_command;$/;"	t	typeref:struct:s_command
t_exp	AST_struct.h	/^} t_exp;$/;"	v	typeref:enum:e_exp
t_fix	AST_struct.h	/^} t_fix;$/;"	t	typeref:struct:s_fix
t_io	AST_struct.h	/^} t_io;$/;"	t	typeref:struct:s_io
t_list	libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_logical_expression	AST_struct.h	/^} t_logical_expression;$/;"	t	typeref:struct:s_logical_expression
t_operator	AST_struct.h	/^} t_operator;$/;"	v	typeref:enum:e_operator
t_pipeline	AST_struct.h	/^} t_pipeline;$/;"	t	typeref:struct:s_pipeline
t_script	AST_struct.h	/^} t_script;$/;"	t	typeref:struct:s_script
t_token	parse_struct.h	/^typedef struct s_token		t_token;$/;"	t	typeref:struct:s_token
t_type	AST_struct.h	/^enum	t_type$/;"	g
t_type	AST_struct.h	/^} t_type;$/;"	v	typeref:enum:t_type
t_type	parse_struct.h	/^typedef enum e_type			t_type;$/;"	t	typeref:enum:e_type
t_variable	libft/ft_printf.h	/^}	t_variable;$/;"	t	typeref:struct:s_variable
t_word	AST_struct.h	/^} t_word;$/;"	t	typeref:struct:s_word
tokenizer	tokenizer.c	/^t_token	*tokenizer(char *line)$/;"	f
type	AST_struct.h	/^	t_type				type;$/;"	m	struct:s_script
type	AST_struct.h	/^	t_type		type;$/;"	m	struct:s_command
type	AST_struct.h	/^	t_type		type;$/;"	m	struct:s_fix
type	AST_struct.h	/^	t_type		type;$/;"	m	struct:s_logical_expression
type	AST_struct.h	/^	t_type		type;$/;"	m	struct:s_pipeline
type	AST_struct.h	/^	t_type		type;$/;"	m	struct:s_word
type	AST_struct.h	/^	t_type	type;$/;"	m	struct:s_exp
type	AST_struct.h	/^	t_type	type;$/;"	m	struct:s_redirect
type	parse_struct.h	/^	enum	e_type	type;$/;"	m	struct:s_token	typeref:enum:s_token::e_type
value	AST_struct.h	/^	char				*value;$/;"	m	struct:s_script
value	AST_struct.h	/^	char		*value;$/;"	m	struct:s_command
value	AST_struct.h	/^	char		*value;$/;"	m	struct:s_fix
value	AST_struct.h	/^	char		*value;$/;"	m	struct:s_logical_expression
value	AST_struct.h	/^	char		*value;$/;"	m	struct:s_pipeline
value	AST_struct.h	/^	char		*value;$/;"	m	struct:s_word
value	AST_struct.h	/^	char	*value;$/;"	m	struct:s_exp
value	AST_struct.h	/^	char	*value;$/;"	m	struct:s_redirect
word	AST_struct.h	/^	t_word		*word;$/;"	m	struct:s_fix
